"""
Tool t·ª± ƒë·ªông sinh c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi cho chƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi
S·ª≠ d·ª•ng Google Gemini API
"""
import os
import csv
import time
import random
from datetime import datetime
from dotenv import load_dotenv
import google.generativeai as genai

# T·∫£i c·∫•u h√¨nh t·ª´ file .env
load_dotenv()

class QAGenerator:
    def __init__(self):
        """Kh·ªüi t·∫°o QA Generator v·ªõi Google Gemini API"""
        self.api_key = os.getenv('GOOGLE_API_KEY')
        if not self.api_key:
            raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong file .env")
        
        # C·∫•u h√¨nh Google Gemini
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        print("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Google Gemini API")
        
        # Danh s√°ch ch·ªß ƒë·ªÅ
        self.topics = {
            "1": "Nh·∫Øc nh·ªü h·∫±ng ng√†y (u·ªëng thu·ªëc, l·ªãch t√°i kh√°m, gi·ªù ƒÉn, u·ªëng n∆∞·ªõc, t·∫≠p th·ªÉ d·ª•c)",
            "2": "ChƒÉm s√≥c s·ª©c kh·ªèe (dinh d∆∞·ª°ng, tri·ªáu ch·ª©ng b·ªánh, l·ªùi khuy√™n y t·∫ø, thu·ªëc, v·∫≠t l√Ω tr·ªã li·ªáu)",
            "3": "S·ª©c kh·ªèe tinh th·∫ßn (c·∫£i thi·ªán gi·∫•c ng·ªß, gi·∫£i tr√≠, t√¢m s·ª±, ho·∫°t ƒë·ªông ph·∫•n ch·∫•n)",
            "4": "Giao ti·∫øp & h·ªó tr·ª£ c·∫£m x√∫c (tr√≤ chuy·ªán, k·ªÉ chuy·ªán, l·∫Øng nghe, t∆∞∆°ng t√°c th√¢n thi·ªán)",
            "5": "ƒêi ch·ª£, n·∫•u ƒÉn, b·∫øp n√∫c (th·ª±c ƒë∆°n, m·∫πo n·∫•u ƒÉn, b·∫£o qu·∫£n th·ª±c ph·∫©m, mua h√†ng)",
            "6": "Vi·ªác nh√† (d·ªçn d·∫πp, s·∫Øp x·∫øp ƒë·ªì ƒë·∫°c, m·∫πo v·∫∑t gia ƒë√¨nh)",
            "7": "Gi·∫£i tr√≠ (phim, c·∫£i l∆∞∆°ng, s√°ch, tr√≤ ch∆°i, truy·ªán c∆∞·ªùi)",
            "8": "T√¢m linh ‚Äì truy·ªÅn th·ªëng (l·ªÖ nghi, c√∫ng gi·ªó, T·∫øt, chuy·ªán d√¢n gian, ca dao)",
            "9": "Quan h·ªá gia ƒë√¨nh (g·ªçi ƒëi·ªán con ch√°u, l·ªùi y√™u th∆∞∆°ng, d·∫°y con ch√°u)",
            "10": "C√¥ng ngh·ªá (ƒëi·ªán tho·∫°i, Zalo, video call, tin l·ª´a ƒë·∫£o, chatbot)",
            "11": "Th√¥ng b√°o t·ª± ƒë·ªông (nh·∫Øc l·ªãch, ch√†o bu·ªïi s√°ng/t·ªëi, th·ªùi ti·∫øt)",
            "12": "C√¢u h·ªèi th∆∞·ªùng g·∫∑p (ƒÉn u·ªëng, s·ª©c kh·ªèe, ƒëau nh·ª©c)"
        }

    def generate_qa_pairs(self, topic_key, num_pairs=10):
        """Sinh c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi cho m·ªôt ch·ªß ƒë·ªÅ"""
        topic = self.topics.get(topic_key, "ChƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi t·ªïng qu√°t")
        
        prompt = f"""
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t·∫°o dataset ƒë·ªÉ hu·∫•n luy·ªán chatbot chƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi. H√£y t·∫°o {num_pairs} c·∫∑p d·ªØ li·ªáu v·ªÅ ch·ªß ƒë·ªÅ: {topic}

Y√™u c·∫ßu:
- INPUT: L√† nh·ªØng c√¢u n√≥i, c√¢u h·ªèi, th·∫Øc m·∫Øc, ph√†n n√†n c·ªßa NG∆Ø·ªúI CAO TU·ªîI VI·ªÜT NAM
- OUTPUT: L√† c√¢u tr·∫£ l·ªùi c·ªßa CHATBOT - th√¢n thi·ªán, h·ªØu √≠ch, chi ti·∫øt
- Ng∆∞·ªùi cao tu·ªïi s·∫Ω n√≥i v·ªÅ c√°c v·∫•n ƒë·ªÅ c·ªßa h·ªç, chatbot c·∫ßn tr·∫£ l·ªùi ph√π h·ª£p
- S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, th√¢n thi·ªán, g·∫ßn g·ª•i
- INPUT ph·∫£i th·∫≠t t·ª± nhi√™n nh∆∞ ng∆∞·ªùi gi√† th·ª±c s·ª± n√≥i

V√≠ d·ª• v·ªÅ ch·ªß ƒë·ªÅ {topic}:
- INPUT c√≥ th·ªÉ l√†: "T√¥i qu√™n u·ªëng thu·ªëc m·∫•t r·ªìi", "ƒêau ƒë·∫ßu qu√°", "Kh√¥ng bi·∫øt n·∫•u g√¨ h√¥m nay"
- OUTPUT: Chatbot s·∫Ω t∆∞ v·∫•n, an ·ªßi, ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ

ƒê·ªãnh d·∫°ng output:
INPUT: [c√¢u n√≥i/h·ªèi c·ªßa ng∆∞·ªùi cao tu·ªïi]
OUTPUT: [c√¢u tr·∫£ l·ªùi c·ªßa chatbot]
---
INPUT: [c√¢u n√≥i/h·ªèi ti·∫øp theo c·ªßa ng∆∞·ªùi cao tu·ªïi]
OUTPUT: [c√¢u tr·∫£ l·ªùi c·ªßa chatbot]
---
(ti·∫øp t·ª•c...)
"""

        try:
            print(f"üîÑ ƒêang sinh {num_pairs} c·∫∑p Q&A cho ch·ªß ƒë·ªÅ: {topic}")
            response = self.model.generate_content(prompt)
            return self.parse_qa_response(response.text)
        except Exception as e:
            print(f"‚ùå L·ªói khi sinh Q&A: {e}")
            return []

    def parse_qa_response(self, response_text):
        """Ph√¢n t√≠ch response v√† tr√≠ch xu·∫•t c√°c c·∫∑p Q&A"""
        qa_pairs = []
        blocks = response_text.split('---')
        
        for block in blocks:
            lines = block.strip().split('\n')
            input_text = ""
            output_text = ""
            
            for line in lines:
                line = line.strip()
                if line.startswith('INPUT:'):
                    input_text = line[6:].strip()
                elif line.startswith('OUTPUT:'):
                    output_text = line[7:].strip()
                elif output_text and line:  # Ti·∫øp t·ª•c output n·∫øu c√≥ nhi·ªÅu d√≤ng
                    output_text += " " + line
            
            if input_text and output_text:
                qa_pairs.append({
                    'input': input_text,
                    'output': output_text
                })
        
        return qa_pairs

    def save_to_csv(self, qa_pairs, filename=None):
        """L∆∞u d·ªØ li·ªáu v√†o file CSV"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"qa_data_{timestamp}.csv"
        
        file_exists = os.path.exists(filename)
        
        with open(filename, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['input', 'output']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            # Ch·ªâ ghi header n·∫øu file m·ªõi
            if not file_exists:
                writer.writeheader()
            
            for qa in qa_pairs:
                writer.writerow(qa)
        
        print(f"üíæ ƒê√£ l∆∞u {len(qa_pairs)} c·∫∑p Q&A v√†o {filename}")
        return filename

    def generate_dataset(self, total_pairs=1000, backup_interval=500):
        """Sinh dataset l·ªõn v·ªõi backup ƒë·ªãnh k·ª≥"""
        print(f"üöÄ B·∫Øt ƒë·∫ßu sinh dataset {total_pairs} c·∫∑p Q&A")
        print(f"üìÅ Sao l∆∞u sau m·ªói {backup_interval} c·∫∑p")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        main_filename = f"elderly_care_qa_{timestamp}.csv"
        
        total_generated = 0
        all_qa_pairs = []
        
        while total_generated < total_pairs:
            # Ch·ªçn ch·ªß ƒë·ªÅ ng·∫´u nhi√™n
            topic_key = random.choice(list(self.topics.keys()))
            batch_size = min(10, total_pairs - total_generated)
            
            # Sinh Q&A cho ch·ªß ƒë·ªÅ n√†y
            qa_pairs = self.generate_qa_pairs(topic_key, batch_size)
            
            if qa_pairs:
                all_qa_pairs.extend(qa_pairs)
                total_generated += len(qa_pairs)
                
                print(f"‚úÖ ƒê√£ sinh {total_generated}/{total_pairs} c·∫∑p Q&A")
                
                # Backup ƒë·ªãnh k·ª≥
                if len(all_qa_pairs) >= backup_interval:
                    backup_filename = f"backup_{len(all_qa_pairs)}_{timestamp}.csv"
                    self.save_to_csv(all_qa_pairs, backup_filename)
                    all_qa_pairs = []  # Reset ƒë·ªÉ ti·∫øt ki·ªám memory
                
                # Ngh·ªâ ng·∫Øn ƒë·ªÉ tr√°nh rate limit
                time.sleep(1)
            else:
                print("‚ö†Ô∏è Kh√¥ng sinh ƒë∆∞·ª£c Q&A, th·ª≠ l·∫°i...")
                time.sleep(2)
        
        # L∆∞u ph·∫ßn c√≤n l·∫°i
        if all_qa_pairs:
            self.save_to_csv(all_qa_pairs, main_filename)
        
        print(f"üéâ Ho√†n th√†nh! ƒê√£ sinh t·ªïng c·ªông {total_generated} c·∫∑p Q&A")

    def test_connection(self):
        """Test k·∫øt n·ªëi API"""
        try:
            response = self.model.generate_content("Ch√†o b·∫°n!")
            print(f"‚úÖ Test th√†nh c√¥ng: {response.text[:50]}...")
            return True
        except Exception as e:
            print(f"‚ùå Test th·∫•t b·∫°i: {e}")
            return False

def main():
    """H√†m main ƒë·ªÉ ch·∫°y tool"""
    try:
        # Kh·ªüi t·∫°o generator
        generator = QAGenerator()
        
        # Test k·∫øt n·ªëi
        if not generator.test_connection():
            return
        
        print("\n" + "="*60)
        print("ü§ñ TOOL SINH C√ÇU H·ªéI - TR·∫¢ L·ªúI CHƒÇM S√ìC NG∆Ø·ªúI CAO TU·ªîI")
        print("="*60)
        
        # Hi·ªÉn th·ªã menu ch·ªß ƒë·ªÅ
        print("\nüìã C√°c ch·ªß ƒë·ªÅ c√≥ s·∫µn:")
        for key, topic in generator.topics.items():
            print(f"{key:2}. {topic}")
        
        print("\nüéØ L·ª±a ch·ªçn:")
        print("A. Sinh dataset l·ªõn (1000+ c·∫∑p Q&A)")
        print("B. Sinh theo ch·ªß ƒë·ªÅ c·ª• th·ªÉ")
        print("C. Test sinh v√†i c·∫∑p Q&A")
        
        choice = input("\nNh·∫≠p l·ª±a ch·ªçn (A/B/C): ").upper()
        
        if choice == 'A':
            num_pairs = int(input("Nh·∫≠p s·ªë c·∫∑p Q&A mu·ªën sinh (m·∫∑c ƒë·ªãnh 1000): ") or "1000")
            generator.generate_dataset(num_pairs)
            
        elif choice == 'B':
            topic_key = input("Nh·∫≠p s·ªë ch·ªß ƒë·ªÅ (1-12): ")
            if topic_key in generator.topics:
                num_pairs = int(input("Nh·∫≠p s·ªë c·∫∑p Q&A (m·∫∑c ƒë·ªãnh 20): ") or "20")
                qa_pairs = generator.generate_qa_pairs(topic_key, num_pairs)
                if qa_pairs:
                    generator.save_to_csv(qa_pairs)
            else:
                print("‚ùå Ch·ªß ƒë·ªÅ kh√¥ng h·ª£p l·ªá!")
                
        elif choice == 'C':
            # Test v·ªõi 3 c·∫∑p Q&A
            qa_pairs = generator.generate_qa_pairs("1", 3)
            if qa_pairs:
                print("\nüìù K·∫øt qu·∫£ test:")
                for i, qa in enumerate(qa_pairs, 1):
                    print(f"\n{i}. INPUT: {qa['input']}")
                    print(f"   OUTPUT: {qa['output']}")
                
                save = input("\nL∆∞u k·∫øt qu·∫£ test? (y/n): ").lower()
                if save == 'y':
                    generator.save_to_csv(qa_pairs, "test_output.csv")
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
