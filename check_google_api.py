"""
Ki·ªÉm tra k·∫øt n·ªëi Google Gemini API
"""
import os
from dotenv import load_dotenv
import google.generativeai as genai

def check_google_api():
    """Ki·ªÉm tra Google Gemini API"""
    print("üîç Ki·ªÉm tra Google Gemini API...")
    
    # T·∫£i config t·ª´ .env
    load_dotenv()
    api_key = os.getenv('GOOGLE_API_KEY')
    
    if not api_key:
        print("‚ùå Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY trong file .env")
        return False
    
    print(f"‚úÖ T√¨m th·∫•y API key: {api_key[:20]}...")
    
    try:
        # C·∫•u h√¨nh v√† test API
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Test v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n
        response = model.generate_content("Xin ch√†o! B·∫°n c√≥ kh·ªèe kh√¥ng?")
        
        print("‚úÖ K·∫øt n·ªëi Google Gemini API th√†nh c√¥ng!")
        print(f"üìù Ph·∫£n h·ªìi test: {response.text[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi Google Gemini API: {e}")
        return False

def main():
    """H√†m main"""
    print("=" * 50)
    print("üîß KI·ªÇM TRA API - GOOGLE GEMINI")
    print("=" * 50)
    
    if check_google_api():
        print("\nüéâ T·∫•t c·∫£ ƒë√£ s·∫µn s√†ng! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng generator_google.py")
    else:
        print("\n‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh API key trong file .env")

if __name__ == "__main__":
    main()
